1.1.1 :  Edit the /etc/kubernetes/config file on the master node and set the KUBE_ALLOW_PRIV parameter to "--allow-privileged=false" : KUBE_ALLOW_PRIV="--allow-privileged=false" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.2 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--anonymous-auth=false" : KUBE_API_ARGS="--anonymous-auth=false" Based on your system, restart the kube-apiserver service. For example, systemctl restart kube-apiserver.service
1.1.3 :  Follow the documentation and configure alternate mechanisms for authentication. Then, edit the /etc/kubernetes/apiserver file on the master node and remove the "--basic- auth-file=<filename>" argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.4 :  Edit the /etc/kubernetes/apiserver file on the master node and remove the --insecure- allow-any-token argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.5 :  Edit the /etc/kubernetes/apiserver file on the master node and remove the --kubelet- https argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.6 :  Edit the /etc/kubernetes/apiserver file on the master node and remove the --insecure- bind-address argument from the KUBE_API_ADDRESS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.7 :  Edit the /etc/kubernetes/apiserver file on the master node and set --insecure-port=0 in the KUBE_API_PORT parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.8 :  Edit the /etc/kubernetes/apiserver file on the master node and either remove the -- secure-port argument from the KUBE_API_ARGS parameter or set it to a different desired port. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.9 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--profiling=false" : KUBE_API_ARGS="--profiling=false" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.10 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--repair-malformed-updates=false" : KUBE_API_ARGS="--repair-malformed-updates=false" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.11 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to a value that does not include AlwaysAdmit . Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.12 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=...,AlwaysPullImages,..." : KUBE_ADMISSION_CONTROL="--admission-control=...,AlwaysPullImages,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.13 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=...,DenyEscalatingExec,..." : KUBE_ADMISSION_CONTROL="--admission-control=...,DenyEscalatingExec,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.14 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=...,SecurityContextDeny,..." : KUBE_ADMISSION_CONTROL="--admission-control=...,SecurityContextDeny,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.15 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=NamespaceLifecycle,..." : KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.16 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--audit-log-path=<filename>" : KUBE_API_ARGS="--audit-log-path=/var/log/apiserver/audit.log" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.17 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--audit-log-maxage=30" : KUBE_API_ARGS="--audit-log-maxage=30" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.18 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--audit-log-maxbackup=10" : KUBE_API_ARGS="--audit-log-maxbackup=10" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.19 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--audit-log-maxsize=100" : KUBE_API_ARGS="--audit-log-maxsize=100" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.20 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to values other than --authorization-mode=AlwaysAllow . One such example could be as below: KUBE_API_ARGS="--authorization-mode=RBAC" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.21 :  Follow the documentation and configure alternate mechanisms for authentication. Then, edit the /etc/kubernetes/apiserver file on the master node and remove the "--token- auth-file=<filename>" argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.22 :  Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--kubelet-certificate-authority=<ca-string>" : KUBE_API_ARGS="--kubelet-certificate-authority=<ca-string>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.23 :  Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--kubelet-client- certificate=<path/to/client-certificate-file>" and "--kubelet-client- key=<path/to/client-key-file>" : KUBE_API_ARGS="--kubelet-client-certificate=<path/to/client-certificate-file> --kubelet-client-key=<path/to/client-key-file>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.24 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--service-account-lookup=true" : KUBE_API_ARGS="--service-account-lookup=true" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.25 :  Follow the documentation and create Pod Security Policy objects as per your environment. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=...,PodSecurityPolicy,..." : KUBE_ADMISSION_CONTROL="--admission-control=...,PodSecurityPolicy,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.26 :  Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--service-account-key-file=<filename>" : KUBE_API_ARGS="--service-account-key-file=<filename>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.27 :  Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include "--etcd-certfile=<path/to/client- certificate-file>" and "--etcd-keyfile=<path/to/client-key-file>" : KUBE_API_ARGS="... --etcd-certfile=<path/to/client-certificate-file> --etcd- keyfile=<path/to/client-key-file> ..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.28 :  Follow the documentation and create ServiceAccount objects as per your environment. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to "--admission- control=...,ServiceAccount,..." : KUBE_ADMISSION_CONTROL="--admission-control=...,ServiceAccount,..." Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.29 :  Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include "--tls-cert-file=<path/to/tls-certificate- file>" and "--tls-private-key-file=<path/to/tls-key-file>" : KUBE_API_ARGS="--tls-cert-file=<path/to/tls-certificate-file> --tls-private- key-file=<path/to/tls-key-file>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.30 :  Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include "--client-ca-file=<path/to/client-ca-file>" : KUBE_API_ARGS="--client-ca-file=<path/to/client-ca-file>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.1.31 :  Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include "--etcd-cafile=<path/to/ca-file>" : KUBE_API_ARGS="--etcd-cafile=<path/to/ca-file>" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service
1.2.1 :  Edit the /etc/kubernetes/scheduler file on the master node and set the KUBE_SCHEDULER_ARGS parameter to "--profiling=false" : KUBE_SCHEDULER_ARGS="--profiling=false" Based on your system, restart the kube-scheduler service. For example: systemctl restart kube-scheduler.service
1.3.1 :  Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to "--terminated-pod-gc- threshold=<appropriate-number>" : KUBE_CONTROLLER_MANAGER_ARGS="--terminated-pod-gc-threshold=10" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.3.2 :  Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to "--profiling=false" : KUBE_CONTROLLER_MANAGER_ARGS="--profiling=false" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.3.3 :  Edit the /etc/kubernetes/controller-manager file on the master node and remove the -- insecure-experimental-approve-all-kubelet-csrs-for-group argument from the KUBE_CONTROLLER_MANAGER_ARGS parameter. Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.3.4 :  Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to --use-service-account- credentials=true : KUBE_CONTROLLER_MANAGER_ARGS="--use-service-account-credentials=true" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.3.5 :  Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to --service-account-private-key- file=<filename> : KUBE_CONTROLLER_MANAGER_ARGS="--service-account-private-key-file=<filename>" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.3.6 :  Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to include --root-ca-file=<file> : KUBE_CONTROLLER_MANAGER_ARGS="--root-ca-file=<file>" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service
1.4.1 :  Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/apiserver
1.4.2 :  Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/apiserver
1.4.3 :  Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/config
1.4.4 :  Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/config
1.4.5 :  Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/scheduler
1.4.6 :  Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/scheduler
1.4.7 :  Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/etcd/etcd.conf
1.4.8 :  Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/etcd/etcd.conf
1.4.9 :  Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/sysconfig/flanneld
1.4.10 :  Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/sysconfig/flanneld
1.4.11 :  On the etcd server node, get the etcd data directory, passed as an argument --data-dir , from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chmod 700 /var/lib/etcd/default.etcd
1.4.12 :  On the etcd server node, get the etcd data directory, passed as an argument --data-dir , from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chown etcd:etcd /var/lib/etcd/default.etcd
1.5.1 :  Follow the etcd service documentation and configure TLS encryption.
1.5.2 :  Edit the etcd envrironment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and set the ETCD_CLIENT_CERT_AUTH parameter to "true" : ETCD_CLIENT_CERT_AUTH="true" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and configure the startup parameter for --client- cert-auth and set it to \"${ETCD_CLIENT_CERT_AUTH}\" : ExecStart=/bin/bash -c "GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\"${ETCD_NAME}\" --data-dir=\"${ETCD_DATA_DIR}\" --listen-client- urls=\"${ETCD_LISTEN_CLIENT_URLS}\" --client-cert- auth=\"${ETCD_CLIENT_CERT_AUTH}\"" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.3 :  Edit the etcd environment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and comment out the ETCD_AUTO_TLS parameter. #ETCD_AUTO_TLS="true" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and remove the startup parameter for --auto-tls . Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.4 :  Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster.
1.5.5 :  Edit the etcd environment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and set the ETCD_PEER_CLIENT_CERT_AUTH parameter to "true" : ETCD_PEER_CLIENT_CERT_AUTH="true" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and configure the startup parameter for --peer- client-cert-auth and set it to \"${ETCD_PEER_CLIENT_CERT_AUTH}\" : ExecStart=/bin/bash -c "GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\"${ETCD_NAME}\" --data-dir=\"${ETCD_DATA_DIR}\" --listen-client- urls=\"${ETCD_LISTEN_CLIENT_URLS}\" --peer-client-cert- auth=\"${ETCD_PEER_CLIENT_CERT_AUTH}\"" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.6 :  Edit the etcd environment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and comment out the ETCD_PEER_AUTO_TLS parameter: #ETCD_PEER_AUTO_TLS="true" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and remove the startup parameter for --peer-auto- tls . Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.7 :  Edit the etcd environment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and set the ETCD_WAL_DIR parameter as appropriate: ETCD_WAL_DIR="<dir-name>" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and configure the startup parameter for --wal-dir and set it to \"${ETCD_WAL_DIR}\" : ExecStart=/bin/bash -c "GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\"${ETCD_NAME}\" --data-dir=\"${ETCD_DATA_DIR}\" --listen-client- urls=\"${ETCD_LISTEN_CLIENT_URLS}\" --wal-dir=\"${ETCD_WAL_DIR}\"" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.8 :  Edit the etcd environment file (for example, /etc/etcd/etcd.conf ) on the etcd server node and set the ETCD_MAX_WALS parameter to 0 : ETCD_MAX_WALS="0" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service ) and configure the startup parameter for --max-wals and set it to \"${ETCD_MAX_WALS}\" : ExecStart=/bin/bash -c "GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\"${ETCD_NAME}\" --data-dir=\"${ETCD_DATA_DIR}\" --listen-client- urls=\"${ETCD_LISTEN_CLIENT_URLS}\" --max-walsr=\"${ETCD_MAX_WALS}\"" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service
1.5.9 :  Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service.
1.6.1 :  Remove any unneeded clusterrolebindings : 130 | P a g ekubectl delete clusterrolebinding [name]
1.6.2 :  Follow the documentation and create and enforce Pod Security Policies for your cluster. Additionally, you could refer the "CIS Security Benchmark for Docker" and follow the suggested Pod Security Policies for your environment.
1.6.3 :  Follow the documentation and create namespaces for objects in your deployment as you need them.
1.6.4 :  Follow the documentation and create NetworkPolicy objects as you need them.
1.6.5 :  Use other mechanisms such as vaults to manage your cluster secrets.
1.6.6 :  Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing "--feature- gates=AllAlpha=true" argument. Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to "--feature-gates=AllAlpha=true" KUBE_API_ARGS="--feature-gates=AllAlpha=true" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Use annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below: apiVersion: v1 kind: Pod metadata: 140 | P a g ename: trustworthy-pod annotations: seccomp.security.alpha.kubernetes.io/pod: docker/default spec: containers: - name: trustworthy-container image: sotrustworthy:latest
1.6.7 :  Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.
1.6.8 :  Follow the Kubernetes documentation and setup image provenance.
2.1.1 :  Edit the /etc/kubernetes/config file on each node and set the KUBE_ALLOW_PRIV parameter to "--allow-privileged=false" : KUBE_ALLOW_PRIV="--allow-privileged=false" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.2 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--anonymous-auth=false" : KUBELET_ARGS="--anonymous-auth=false" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.3 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--authorization-mode=Webhook" : KUBELET_ARGS="--authorization-mode=Webhook" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.4 :  Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--client-ca-file=<path/to/client-ca-file>" : KUBELET_ARGS="--client-ca-file=<path/to/client-ca-file>" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.5 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--read-only-port=0" KUBELET_ARGS="--read-only-port=0" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.6 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--streaming-connection-idle-timeout=<appropriate-timeout-value>" KUBELET_ARGS="--streaming-connection-idle-timeout=5m" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.7 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--protect-kernel-defaults=true" KUBELET_ARGS="--protect-kernel-defaults=true" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.8 :  Edit the /etc/kubernetes/kubelet file on each node and remove the --make-iptables- util-chains argument from the KUBELET_ARGS parameter. Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.9 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--keep-terminated-pod-volumes=false" : KUBELET_ARGS="--keep-terminated-pod-volumes=false" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.10 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_HOSTNAME parameter to "" : KUBELET_HOSTNAME="" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.11 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--event-qps=0" : KUBELET_ARGS="--event-qps=0" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.12 :  Follow the Kubernetes documentation and set up the TLS connection on the Kubelet. Then, edit the /etc/kubernetes/kubelet file on the master node and set the KUBELET_ARGS parameter to include "--tls-cert-file=<path/to/tls-certificate-file>" and "--tls- private-key-file=<path/to/tls-key-file>" : KUBELET_ARGS="--tls-cert-file=<path/to/tls-certificate-file> --tls-private- key-file=<path/to/tls-key-file>" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.1.13 :  Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to "--cadvisor-port=0" : KUBELET_ARGS="--cadvisor-port=0" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service
2.2.1 :  Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/config
2.2.2 :  Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/config
2.2.3 :  Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/kubelet
2.2.4 :  Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/kubelet
2.2.5 :  Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/proxy
2.2.6 :  Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/proxy
3.1.1 :  Edit the deployment specs and set --anonymous-auth=false . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.2 :  Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove "--basic-auth-file=<filename>" . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.3 :  Edit the deployment specs and remove --insecure-allow-any-token . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.4 :  Edit the deployment specs and remove --insecure-bind-address . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.5 :  Edit the deployment specs and set --insecure-port=0 . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.6 :  Edit the deployment specs and set the --secure-port argument to the desired port. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.7 :  Edit the deployment specs and set "--profiling=false" : kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.8 :  Edit the deployment specs and set --admission-control argument to a value that does not include AlwaysAdmit . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.9 :  Edit the deployment specs and set --admission-control argument to a value that includes NamespaceLifecycle . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.10 :  Edit the deployment specs and set --audit-log-path argument as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.11 :  Edit the deployment specs and set --audit-log-maxage to 30 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.12 :  Edit the deployment specs and set --audit-log-maxbackup to 10 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.13 :  Edit the deployment specs and set --audit-log-maxsize=100 to 100 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.14 :  Edit the deployment specs and set --authorization-mode argument to a value other than AlwaysAllow kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.15 :  Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove the --token-auth-file=<filename> argument. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.16 :  Edit the deployment specs and set "--service-account-lookup=true" . kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.17 :  Edit the deployment specs and set --service-account-key-file argument as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.18 :  Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set "--etcd- certfile=<path/to/client-certificate-file>" and "--etcd- keyfile=<path/to/client-key-file>" arguments. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.1.19 :  Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set "--tls-cert-file=<path/to/tls- certificate-file>" and "--tls-private-key-file=<path/to/tls-key-file>" : kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system
3.2.1 :  Edit the deployment specs and set "--profiling=false" : kubectl edit deployments federation-controller-manager-deployment -- namespace=federation-system
